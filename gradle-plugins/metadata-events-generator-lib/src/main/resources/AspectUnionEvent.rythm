@import com.linkedin.metadata.generator.AspectUnionEventSpec;
@import com.linkedin.metadata.generator.SchemaGeneratorUtil;
@args AspectUnionEventSpec eventSpec
namespace @(eventSpec.getNamespace())

import com.linkedin.avro2pegasus.events.KafkaAuditHeader
import com.linkedin.metadata.events.IngestionTrackingContext
import com.linkedin.metadata.events.ChangeType
import @eventSpec.getUrnType()
@for (String valueType: eventSpec.getValueTypes()) {
import @valueType
}

/**
 * MetadataChangeEvent for aspects of @(eventSpec.getShortUrn()).
 */
@@MetadataChangeEvent
record MCE@(eventSpec.getShortTyperefName()) {

  /**
   * Kafka audit header. See go/kafkaauditheader for more info.
   */
  auditHeader: optional KafkaAuditHeader

  /**
   * @(eventSpec.getShortUrn()) as the key for the MetadataChangeEvent.
   */
  urn: @(eventSpec.getShortUrn())

  /**
   * Tracking context to identify the lifecycle of the trackable ingestion item.
   */
  ingestionTrackingContext: optional union[null, IngestionTrackingContext] = null

  @for (String valueType: eventSpec.getValueTypes()) {
  /**
   * Proposed change values for aspect @(SchemaGeneratorUtil.stripNamespace(valueType)).
   */
  proposed@(SchemaGeneratorUtil.stripNamespace(valueType)): optional record Proposed@(SchemaGeneratorUtil.stripNamespace(valueType)) {
    value: optional @(SchemaGeneratorUtil.stripNamespace(valueType))
    changeType: ChangeType = "UPSERT"
  }

  }
}